;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 11/12/2020 14:42:24
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x282D      	GOTO       45
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00A4      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00A5      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
;Q5.c,4 :: 		void interrupt()
;Q5.c,6 :: 		if(T0IF_bit)                               // verifica se houve estouro
0x000B	0x1D0B      	BTFSS      T0IF_bit, BitPos(T0IF_bit+0)
0x000C	0x2813      	GOTO       L_interrupt0
;Q5.c,8 :: 		contador++;                        // acrescenta
0x000D	0x0AA0      	INCF       _contador, 1
0x000E	0x1903      	BTFSC      STATUS, 2
0x000F	0x0AA1      	INCF       _contador+1, 1
;Q5.c,9 :: 		TMR0 = 0x06;                       //reinicia o TMR0
0x0010	0x3006      	MOVLW      6
0x0011	0x0081      	MOVWF      TMR0
;Q5.c,11 :: 		T0IF_bit = 0x00;          //limpa a flag
0x0012	0x110B      	BCF        T0IF_bit, BitPos(T0IF_bit+0)
;Q5.c,12 :: 		}
L_interrupt0:
;Q5.c,13 :: 		}
L_end_interrupt:
L__interrupt5:
0x0013	0x0825      	MOVF       ___savePCLATH, 0
0x0014	0x008A      	MOVWF      PCLATH
0x0015	0x0E24      	SWAPF      ___saveSTATUS, 0
0x0016	0x0083      	MOVWF      STATUS
0x0017	0x0EFF      	SWAPF      R15, 1
0x0018	0x0E7F      	SWAPF      R15, 0
0x0019	0x0009      	RETFIE
; end of _interrupt
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x001A	0x1283      	BCF        STATUS, 5
0x001B	0x1303      	BCF        STATUS, 6
0x001C	0x0823      	MOVF       ___DoICPAddr+1, 0
0x001D	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x001E	0x0822      	MOVF       ___DoICPAddr, 0
0x001F	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0020	0x0008      	RETURN
; end of _____DoICP
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x0021	0x201A      	CALL       _____DoICP
0x0022	0x118A      	BCF        PCLATH, 3
0x0023	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x0024	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x0025	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x0026	0x0AA2      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x0027	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x0028	0x0AA3      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x0029	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x002A	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x002B	0x2821      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x002C	0x0008      	RETURN
; end of ___CC2DW
_main:
0x002D	0x1283      	BCF        STATUS, 5
0x002E	0x1303      	BCF        STATUS, 6
0x002F	0x01A0      	CLRF       _contador
0x0030	0x01A1      	CLRF       33
;Q5.c,15 :: 		void main() {
;Q5.c,17 :: 		OPTION_REG =0X81;      // DESABILITA RESISTORES DE PULL_UP INTERNOS
0x0031	0x3081      	MOVLW      129
0x0032	0x1683      	BSF        STATUS, 5
0x0033	0x0081      	MOVWF      OPTION_REG
;Q5.c,20 :: 		GIE_bit =  0X01;        //HABILITA INTERRUPÇÃO GLOBAL
0x0034	0x178B      	BSF        GIE_bit, BitPos(GIE_bit+0)
;Q5.c,21 :: 		PEIE_bit = 0X01;       //HABILITA A INTERRUPÇÃO POR PERIFERICOS
0x0035	0x170B      	BSF        PEIE_bit, BitPos(PEIE_bit+0)
;Q5.c,22 :: 		T0IE_bit = 0X01;       //HABILITA  INTERRUPÃO POR ESTOURO DO TMR0
0x0036	0x168B      	BSF        T0IE_bit, BitPos(T0IE_bit+0)
;Q5.c,24 :: 		TMR0 = 0X06;            // INICIA A CONTAGEM EM 6
0x0037	0x3006      	MOVLW      6
0x0038	0x1283      	BCF        STATUS, 5
0x0039	0x0081      	MOVWF      TMR0
;Q5.c,26 :: 		TRISB.RB4 =0X00;        // SAIDA DIGITAL
0x003A	0x1683      	BSF        STATUS, 5
0x003B	0x1206      	BCF        TRISB, 4
;Q5.c,27 :: 		RB4_bit  =0x00;         // INICIA RB4 EM LOW
0x003C	0x1283      	BCF        STATUS, 5
0x003D	0x1206      	BCF        RB4_bit, BitPos(RB4_bit+0)
;Q5.c,29 :: 		while(1)
L_main1:
;Q5.c,31 :: 		if( contador == 250)
0x003E	0x3000      	MOVLW      0
0x003F	0x0621      	XORWF      _contador+1, 0
0x0040	0x1D03      	BTFSS      STATUS, 2
0x0041	0x2844      	GOTO       L__main7
0x0042	0x30FA      	MOVLW      250
0x0043	0x0620      	XORWF      _contador, 0
L__main7:
0x0044	0x1D03      	BTFSS      STATUS, 2
0x0045	0x284A      	GOTO       L_main3
;Q5.c,33 :: 		RB4_bit = ~RB4_bit;         // inverte estado do
0x0046	0x3010      	MOVLW      16
0x0047	0x0686      	XORWF      RB4_bit, 1
;Q5.c,34 :: 		contador = 0x00;
0x0048	0x01A0      	CLRF       _contador
0x0049	0x01A1      	CLRF       _contador+1
;Q5.c,35 :: 		}
L_main3:
;Q5.c,38 :: 		}
0x004A	0x283E      	GOTO       L_main1
;Q5.c,40 :: 		}
L_end_main:
0x004B	0x284B      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [22]    _interrupt
0x001A       [7]    _____DoICP
0x0021      [12]    ___CC2DW
0x002D      [31]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [0]    RB4_bit
0x000A       [1]    PCLATH
0x000B       [0]    PEIE_bit
0x000B       [0]    T0IE_bit
0x000B       [0]    GIE_bit
0x000B       [0]    T0IF_bit
0x0020       [2]    _contador
0x0022       [2]    ___DoICPAddr
0x0024       [1]    ___saveSTATUS
0x0025       [1]    ___savePCLATH
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0086       [1]    TRISB
